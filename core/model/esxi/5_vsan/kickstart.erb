# Thanks to William Lam for being the guru
accepteula
clearpart --firstdisk --overwritevmfs
install --firstdisk --overwritevmfs
rootpw <%= @root_password %>
reboot

%include /tmp/networkconfig
%pre --interpreter=busybox

echo 'network --bootproto=static --addvmportgroup=false --device=vmnic0 --ip=<%= node_ip_address %> --netmask=<%= @ip_range_subnet %> --gateway=<%= @gateway %> --nameserver=<%= @nameserver %> --hostname=<%= node_hostname %>' > /tmp/networkconfig


#Send callback to hanlon that the kickstart is complete
wget <%= api_svc_uri %>/policy/callback/<%= @policy_uuid %>/kickstart/end

%firstboot --interpreter=busybox

vsan_syslog_key = "VSAN-KS"

logger $vsan_syslog_key " Hanlon Postinstall complete"
#Send callback to hanlon that the postinstall is complete
wget <%= api_svc_uri %>/policy/callback/<%= @policy_uuid %>/postinstall/end

logger $vsan_syslog_key " Enabling & Starting SSH"
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

logger $vsan_syslog_key " Enabling & Starting ESXi Shell"
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

logger $vsan_syslog_key " Reconfiguring VSAN Default Policy"
esxcli vsan policy setdefault -c vdisk -p "((\"hostFailuresToTolerate\" i1) (\"forceProvisioning\" i1))"
esxcli vsan policy setdefault -c vmnamespace -p "((\"hostFailuresToTolerate\" i1) (\"forceProvisioning\" i1))"
 
logger $vsan_syslog_key "Enabling VSAN Traffic on vmk0"
esxcli vsan network ipv4 add -i vmk0

logger $vsan_syslog_key "Renaming datastore1"
vim-cmd hostsvc/datastore/rename datastore1 "$(hostname -s)-local-storage-1"

# assign license
vim-cmd vimsvc/license --set <%= @esx_license %>


# change the individual syslog rotation count
esxcli system syslog config logger set --id=hostd --rotate=20 --size=2048
esxcli system syslog config logger set --id=vmkernel --rotate=20 --size=2048
esxcli system syslog config logger set --id=fdm --rotate=20
esxcli system syslog config logger set --id=vpxa --rotate=20

### NTP CONFIGURATIONS ###
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1
server <%= @ntpserver %>
__NTP_CONFIG__
/sbin/chkconfig --level 345 ntpd on

### FIREWALL CONFIGURATION ###

# enable firewall
esxcli network firewall set --default-action false --enabled yes

# services to enable by default
FIREWALL_SERVICES='syslog sshClient ntpClient updateManager httpClient netdump'
for SERVICE in ${FIREWALL_SERVICES}
do
esxcli network firewall ruleset set --ruleset-id ${SERVICE} --enabled yes
done

# backup ESXi configuration to persist changes
/sbin/auto-backup.sh

# enter maintenance mode
vim-cmd hostsvc/maintenance_mode_enter

# copy %first boot script logs to persisted datastore
cp /var/log/hostd.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-esxi_install.log"

## not sure what to do about the reboot

%firstboot --interpreter=python
 
import commands, os, uuid, syslog
 
vsan_syslog_key = "VSAN-KS"
debug = False
 
# Build VSAN Disk Group command based on vdq -q output
def createVsanDiskGroup():
    vdqoutput = eval(commands.getoutput("/sbin/vdq -q"))
    md = []
    ssd = ''
    for i in vdqoutput:
        if i['State'] == 'Eligible for use by VSAN':
            if i['Reason'] == 'Non-local disk':
                syslog.syslog(vsan_syslog_key + " Setting enable_local and reclaiming " + i['Name'])
                if debug == False:
                    os.system("esxcli storage nmp satp rule add -s VMW_SATP_LOCAL -o enable_local -d " + i['Name'])
                    os.system("esxcli storage core claiming reclaim -d " + i['Name'])
            if i['IsSSD'] == '1':
                ssd = i['Name']
            else:
                md.append(i['Name'])
 
    diskgroup_cmd = 'esxcli vsan storage add -s ' + ssd + ' -d ' + ' -d '.join(md)
    syslog.syslog(vsan_syslog_key + " Creating VSAN Disk Group using SSD: " + ssd +  " MD: " + ', '.join(md))
    if debug == False:
        os.system(diskgroup_cmd)
 
# Create VSAN Cluster (required only for first ESXi node)
def createVsanCluster(vsan_uuid):
    syslog.syslog(vsan_syslog_key + " Creating VSAN Cluster using UUID: " + vsan_uuid)
    if debug == False:
        os.system("esxcli vsan cluster join -u " + vsan_uuid)


createVsanDiskGroup()
createVsanCluster("<%= @vsan_uuid %>")

