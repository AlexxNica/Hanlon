#!/bin/bash

# Wait for network to come up when using NetworkManager.
if service NetworkManager status >/dev/null 2>&1 && type -P nm-online; then
    nm-online -q --timeout=10 || nm-online -q -x --timeout=30
    [ "$?" -eq 0 ] || exit 1
fi

# Configure hostname.
hostname <%= hostname %>
echo <%= hostname %> > /etc/hostname

# This set of commands should convert the first local (but non-loopback) IP
# address in the /etc/hosts file to an entry that has the fully-qualified
# hostname and local hostname as part of the entry (so that tehse names can
# be resolved properly). A backup of the original file will be left in place
# in the /etc/hosts- file
cp -p /etc/hosts /etc/hosts-
grep '^127\.0\.0\.1.*' /etc/hosts- > /etc/hosts
grep -v '^127\.0\.0\.1.*' /etc/hosts- | grep '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' | head -1 | sed 's/^\(127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)\([[:blank:]]\{1,\}\)\(.*\)$/\1\2'<%= hostname %>.<%= domainname %>'\2'<%= hostname %>'/' >> /etc/hosts
grep -v '^127\.0\.0\.1.*' /etc/hosts- | grep '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' | tail -n +2 >> /etc/hosts
grep -v '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' /etc/hosts- >> /etc/hosts

[ "$?" -eq 0 ] && curl <%= callback_url("postinstall", "set_hostname_ok") %> || curl <%= callback_url("postinstall", "set_hostname_fail") %>

# Get current IP
default_gw_device=`ip route show | grep 'default' | awk '{print $5}'`
node_ip=`ip addr show $default_gw_device | grep 'inet ' | awk -F'[ /]' '{print $6}'`
# Send IP up
curl <%= callback_url("postinstall", "send_ips") %>/$node_ip
# get final script
curl <%= callback_url("postinstall", "boot") %> | sh
# Send final state
curl <%= callback_url("postinstall", "final") %> &
